'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _eventemitter = require('eventemitter3');

var _eventemitter2 = _interopRequireDefault(_eventemitter);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _webhook = require('./webhook');

var _webhook2 = _interopRequireDefault(_webhook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _eventTypes = ['message', 'follow', 'unfollow', 'join', 'leave', 'postback', 'beacon'];
var _messageTypes = ['text', 'image', 'video', 'audio', 'location', 'sticker'];
var _sourceTypes = ['user', 'group', 'room'];

var _baseUrl = 'https://api.line.me';

var LineBot = function (_EventEmitter) {
  _inherits(LineBot, _EventEmitter);

  _createClass(LineBot, null, [{
    key: 'eventTypes',
    get: function get() {
      return _eventTypes;
    }
  }, {
    key: 'messageTypes',
    get: function get() {
      return _messageTypes;
    }
  }, {
    key: 'sourceTypes',
    get: function get() {
      return _sourceTypes;
    }
  }]);

  function LineBot(_ref) {
    var secret = _ref.secret,
        token = _ref.token,
        _ref$options = _ref.options,
        options = _ref$options === undefined ? {} : _ref$options;

    _classCallCheck(this, LineBot);

    var _this = _possibleConstructorReturn(this, (LineBot.__proto__ || Object.getPrototypeOf(LineBot)).call(this));

    if (!secret) throw new Error('Please supply a LINE Secret.');
    if (!token) throw new Error('Please supply a LINE Token.');
    _this.secret = secret;
    _this.token = token;
    _this.options = options;
    _this._Webhook = new _webhook2.default({
      secret: secret,
      token: token,
      options: options,
      onEvents: _this.processEvents.bind(_this),
      onWebhook: function onWebhook(webhook) {
        _this.emit('webhook', webhook);
      },
      onTunnel: function onTunnel(args) {
        _this.emit('tunnel', args);
      }
    });
    _this._regexpCallback = [];
    _this.getContentFromEvent = _this.getContentFromEvent.bind(_this);
    _this.getProfileFromEvent = _this.getProfileFromEvent.bind(_this);
    _this._request = _this._request.bind(_this);
    return _this;
  }

  _createClass(LineBot, [{
    key: 'onText',
    value: function onText(regexp, callback) {
      this._regexpCallback.push({ regexp: regexp, callback: callback });
    }
  }, {
    key: '_request',
    value: function _request(method, path, payload, type) {
      var opts = {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this.token
        },
        url: _baseUrl + path,
        data: payload || {}
      };
      if (type === 'content') opts.responseType = 'arraybuffer';
      return (0, _axios2.default)(opts).then(function (_ref2) {
        var data = _ref2.data;
        return data;
      }).catch(function (_ref3) {
        var data = _ref3.response.data;
        return Promise.reject(data);
      });
    }
  }, {
    key: 'processEvents',
    value: function processEvents(events, req) {
      this.emit('events', events, req);
      // `events` is a Webhook Event Object -- https://devdocs.line.me/en/#webhook-event-object
      events.forEach(this.parseOneEvent.bind(this));
    }
  }, {
    key: 'parseOneEvent',
    value: function parseOneEvent(event) {
      var type = event.source.type;

      this.emit('event', event);
      this.emit('event:' + type, event);
      event.type = event.type || '';
      switch (event.type) {
        case 'message':
          this.emit('message', event);
          this.emit('message:' + type, event);
          if (event.message.type === 'text' && event.message.text) {
            this.emit('text', event);
            this.emit('text:' + type, event);
            this._regexpCallback.forEach(function (rgx) {
              var result = rgx.regexp.exec(event.message.text);
              if (result) rgx.callback(event, result);
            });
          } else {
            if (event.message.type === 'audio' || event.message.type === 'video' || event.message.type === 'image') {
              this.emit('message-with-content');
              this.emit('message-with-content:' + type, event);
            }
            this.emit('non-text', event);
            this.emit('non-text:' + type, event);
            this.emit(event.message.type, event);
          }
          break;
        case 'follow':
          this.emit('follow', event);
          this.emit('follow:' + type, event);
          break;
        case 'unfollow':
          this.emit('unfollow', event);
          this.emit('unfollow:' + type, event);
          break;
        case 'join':
          this.emit('join', event);
          this.emit('join:' + type, event);
          break;
        case 'leave':
          this.emit('leave', event);
          this.emit('leave:' + type, event);
          break;
        case 'postback':
          this.emit('postback', event);
          this.emit('postback:' + type, event);
          break;
        case 'beacon':
          this.emit('beacon', event);
          this.emit('beacon:' + type, event);
          break;
        default:
          break;
      }
    }
  }, {
    key: 'pushMessage',
    value: function pushMessage(channel, messages) {
      var pushEndpoint = '/v2/bot/message/push';
      messages = Array.isArray(messages) ? messages : [messages];
      if (messages.length < 1 || messages.length > 5) return Promise.reject(Error('Invalid messages length. (1 - 5), the message was ' + messages.length));
      var payload = {
        to: channel,
        messages: messages
      };
      return this._request('post', pushEndpoint, payload);
    }
  }, {
    key: 'multicast',
    value: function multicast(channels, messages) {
      var multicastEndpoint = '/v2/bot/message/multicast';
      if (!channels) return Promise.reject(Error('you must supply valid channels'));
      if (!messages) return Promise.reject(Error('you must supply messages to push'));
      messages = Array.isArray(messages) ? messages : [messages];
      channels = Array.isArray(channels) ? channels : [channels];
      if (messages.length < 1 || messages.length > 5) return Promise.reject(Error('Invalid messages length. (1 - 5), the message was ' + messages.length));
      if (channels.length < 1 || channels.length > 150) return Promise.reject(Error('Invalid channels length. (1 - 150), the recipients were too many (' + channels.length + ')'));
      var payload = {
        to: channels,
        messages: messages
      };
      return this._request('post', multicastEndpoint, payload);
    }
  }, {
    key: 'replyMessage',
    value: function replyMessage(replyToken, messages) {
      var replyEndpoint = '/v2/bot/message/reply';
      messages = Array.isArray(messages) ? messages : [messages];
      if (messages.length < 1 || messages.length > 5) return Promise.reject(Error('Invalid messages length. (1 - 5), the message was ' + messages.length));
      var payload = {
        replyToken: replyToken,
        messages: messages
      };
      return this._request('post', replyEndpoint, payload);
    }
  }, {
    key: 'getContent',
    value: function getContent(messageId) {
      if (!messageId || typeof messageId !== 'string') return Promise.reject(Error('No message Id.'));
      var contentEndpoint = '/v2/bot/message/' + messageId + '/content';
      return this._request('get', contentEndpoint, null, 'content');
    }
  }, {
    key: 'getContentFromEvent',
    value: function getContentFromEvent(_ref4) {
      var id = _ref4.message.id;

      return this.getContent(id);
    }
  }, {
    key: 'getProfile',
    value: function getProfile(userId) {
      if (!userId || typeof userId !== 'string') return Promise.reject(Error('No user Id.'));
      var profileEndpoint = '/v2/bot/profile/' + userId;
      return this._request('get', profileEndpoint, null);
    }
  }, {
    key: 'getProfileFromEvent',
    value: function getProfileFromEvent(_ref5) {
      var source = _ref5.source,
          type = _ref5.source.type;

      return this.getProfile(source[type + 'Id']);
    }
  }, {
    key: 'leaveChannel',
    value: function leaveChannel(channel) {
      var channelId = channel && (channel.groupId || channel.roomId);
      if (!channelId) return Promise.reject(Error('No channel Id.'));
      var leaveEndpoint = channel.groupId ? '/v2/bot/group/' + channel + '/leave' : '/v2/bot/room/' + channel + '/leave';
      return this._request('post', leaveEndpoint, null);
    }
  }]);

  return LineBot;
}(_eventemitter2.default);

exports.default = LineBot;